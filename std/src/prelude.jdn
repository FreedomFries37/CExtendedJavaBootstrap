#include <prelude.h>
#include <string.h>


void printf(const char* c);

void print(const char* c) {
	printf(c);
}
void println(const char* c) {
	if(c != nullptr) {
		print(c);
	}
	print("\n");
}
void print_s(std::String o) {
	print(o->getCStr());
}
void println_s(std::String o) {
	println(o->getCStr());
}

int get_hashcode_for(std::Object o);

in std {


	implement Object {
		Object() { }

		int hashcode() {
			return get_hashcode_for(this);
		}

		bool equals(Object other) {
			return this == other;
		}

		String toString() {
			return this->getClass()->getName()->concat("@")->concat(this->hashcode());
		}

		void drop() {
			free(this);
		}

		ClassInfo getClass() {
			return this->info;
		}
	}

	implement ClassInfo {

		ClassInfo() { }


		String getName() { return this->name; }

		bool is_object(Object o) {
			if(o == nullptr) return false;
			return this->is_class(o->getClass());
		}

		bool is_class(ClassInfo o) {
			if (o->equals(this)) return true;
			if (o->parent != nullptr) {
				 return this->is_class(o->parent);
			}
			return false;
		}

		bool equals(Object other) {
			if (!other) return false;
			if (!this->getClass()->is_object(other)) return false;
			return this->equals((ClassInfo) other);
		}
		bool equals(ClassInfo other) {
			return this->classHash == other->classHash;
		}



	}







}

