#line 1 "prelude.h"
#ifndef __PRELUDE_HEADER__
#define __PRELUDE_HEADER__

in std class ClassInfo;
in std class String;

typedef unsigned char bool;
typedef unsigned long class_id;

void* malloc(unsigned int sz);
void* calloc(unsigned int num, unsigned int sz);
void free(void* ptr);

void print(const char* c);
void println(const char* c);
void print_s(std::String o);
void println_s(std::String o);

const void* nullptr = 0;


in std {
    ClassInfo get_class(class_id id);

    [setAsDefaultInheritance]
    class Object { 
        private ClassInfo info;
        public long references; 

        public Object();

        virtual public int hashcode();
        virtual public bool equals(Object other);
        virtual public void drop();



        virtual public String toString();

        public ClassInfo getClass();


    };

    class ClassInfo {
        private String name;
        private ClassInfo parent;
        private int classHash;

        private ClassInfo(String name, ClassInfo parent, int classHash);

        public String getName();

        public int is(Object o);

        virtual public bool equals(Object other);
        virtual public bool equals(ClassInfo other);
    };

    class String{
        char* backingPtr;
        int length;

        public String(const char* bp);

        public String();

        virtual public void drop();

        public String concat(String other);

        public String concat(char* other);

        public String concat_integer(long other);

        public const char* getCStr();
    };

}

#endif

#line 1 "C:\Users\jradi\ProgrammingWorkspace\Java\CExtendedJavaBootstrap\std\src\prelude.cx"
#line 1 "prelude.h"
#ifndef __PRELUDE_HEADER__
#define __PRELUDE_HEADER__
#endif

#line 2 "C:\Users\jradi\ProgrammingWorkspace\Java\CExtendedJavaBootstrap\std\src\prelude.cx"

void print(const char* c) {

}



in std {
    implement Object {
        int hashcode() {
            return (int) (void*) this;
        }

        bool equals(Object other) {
            return this == other;
        }

        String toString() {
            return this->getClass()->getName()->concat("@")->concat(this->hashcode());
        }

        void drop() {
            free(this);
        }

        ClassInfo getClass() {
            return this->info;
        }
    }

    ClassInfo __get_class(class_id id) {
        return nullptr;  
    }

}
