MOST BASIC LEVEL - Expressions
E	-> DOR DORT ET

ET	-> ? E : E
	->


DOR -> DAND DANT

DORT-> || DOR DORT

DAND-> OR ORT

DANT-> && DAND DANT
	->

OR	-> NOT NOTT

ORT -> | OR ORT
	->

NOT -> AND ANDT

NOTT-> ^ NOT NOTT
	->

AND -> EQ EQT

ANDT-> & AND ANDT
	->

EQ	-> C CT

EQT -> == EQ EQT
	-> != EQ EQT
	->

C	-> G GT

CT	-> < C CT
	-> <= C CT
	-> > C CT
	-> >= C CT
	->

G	-> T TT

GT	-> << G GT
	-> >> G GT
	->



T	-> F FT

TT	-> + T TT
	-> - T TT
	->

FT	-> * F FT
	-> / F FT
	-> % F FT
	->

F	-> - F
	-> ~ F
	-> ! F
	-> * F
	-> & F
	-> + F
	-> ++ F
	-> -- F
	-> CAST
	-> literal
	-> string
	-> A AT

CAST->(type_name) F

A	-> (E)
	-> id FC

AT	-> . id FC AT
	-> -> id FC AT
	-> [ E ] AT
	-> ++
	-> --
	->

FC	-> ( L )
	->

L	-> E LT
	->

LT	-> , L
	->

TYPES:
typedef		-> typedef type_name id

type_name			-> spec_and_quals abstract_declarator

spec_and_quals 	-> type_specifier s_and_q_tail
				-> type_qualifier s_and_q_tail
				-> single_qualifier

s_and_q_tail	-> spec_and_quals
				->

type_qualifier	-> const

type_qualifer_list	-> type_qualifier type_qualifier_list_tail

type_qualifier_list_tail	-> type_qualifier_list
							->

type_specifier	-> void
				-> char
				-> int
				-> long
				-> float
				-> double
				-> unsigned
				-> struct_or_union_specifier
				-> class_specifier
				-> enum_specifier
				-> type_name

struct_or_union_specifier	-> struct_or_union id

struct_or_union				-> struct
							-> union

class_specifier 			-> class id

abstract_declarator		-> direct_abstract_declarator
						-> pointer direct_abstract_declarator
						->

direct_abstract_declarator	-> [ ] direct_abstract_declarator
							->

pointer		-> * pointer
			-> * type_qualifier_list pointer
			-> * type_qualifier_list
			-> *

class_declaration			-> class id { class_declaration_list } ;
							-> class id inherit { class_declaration_list } ;

inherit						-> : typename

class_declaration_list	-> class_top_level_declaration class_declaration_list
					  	->

visibility				-> public
						-> private

class_top_level_declaration	-> visibility constructor_def compound_statement
							-> constructor_def compound_statement
							-> visibility function_declaration
							-> function_declaration
							-> visibility declaration
							-> declaration

constructor_def				-> typename ( parameter_list )