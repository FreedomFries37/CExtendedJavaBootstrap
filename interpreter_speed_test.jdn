#include <time.h>
#include <stdint.h>

#define TEST_SIZE 100

void swap(i32* a, i32* b) {
	i32 temp = *a;
	*a = *b;
	*b = temp;
}
void insertion_sort(i32* arr, size_t length);
void merge_sort(i32* arr, size_t length);
void merge_sort_helper(i32* arr, size_t from, size_t to);
void partition(i32* arr, size_t from, size_t to);
size_t quick_sort(i32* arr, size_t from, size_t to);


int main(int argc, std::String argv[]) {

	i32 arr[TEST_SIZE];
	for(int i = 0; i < TEST_SIZE; ++i) {
		arr[i] = TEST_SIZE - i;
	}
	merge_sort(arr, TEST_SIZE);
	// insertion_sort(arr, TEST_SIZE);


	for(int i = 0; i < TEST_SIZE; ++i) {
    	if(arr[i] != i) {
    		return -1;
    	}
    }




	return 0;
}

void insertion_sort(i32* arr, size_t length) {
	size_t i = 1;
	while(i < length) {

		size_t j = i;
		while(j > 0 && arr[j-1] > arr[j]) {
			swap(&arr[j], &arr[j-1]);
			--j;
		}
		++i;
	}

}

void merge_sort(i32* arr, size_t length) {
	merge_sort_helper(arr, 0, length);
}
void merge_sort_helper(i32* arr, size_t from, size_t to) {
	if(to - from <= 1) return;
	size_t mid = (to + from) / 2;
	merge_sort_helper(arr, from, mid);
	merge_sort_helper(arr, mid, to);

	size_t index = from;
	size_t leftIndex = from;
	size_t rightIndex = mid;
	for(; index < to; ++index) {
		if(rightIndex == to || leftIndex < mid && arr[leftIndex] < arr[rightIndex]) {
			arr[index] = leftIndex++;
		} else {
			arr[index] = rightIndex++;
		}
	}
}

int partition(i32* arr, size_t low, size_t high) {
	int pivot = arr[high]; // pivot
    int i = (low - 1); // Index of smaller element

    for (int j = low; j <= high - 1; j++)
    {
        // If current element is smaller than the pivot
        if (arr[j] < pivot)
        {
            i++; // increment index of smaller element
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);

}
void quick_sort(i32* arr, size_t low, size_t high) {
	if (low < high){
		/* pi is partitioning index, arr[p] is now
		at right place */
		int pi = partition(arr, low, high);

		// Separately sort elements before
		// partition and after partition
		quick_sort(arr, low, pi - 1);
		quick_sort(arr, pi + 1, high);
	}
}

