int main(int argc, char *argv[]) {


	return 0;
}

struct string;

struct string {
	char* ptr;
	unsigned int length;
};

class node {
	void* value;
	private node* next;

	public node(void* value) {
		this->value = value;
		next = NULL;
	}

	node* getNext() {
		return this->next;
	}

	void setNext(node* other) {
		this->next = other->next;
	}

	node* get_nth(int n) {
		int count;
		node* ptr = this, *output;
		int saw = n;
		for(count = 0; count < n; count++) {
			ptr = this->next;
			--saw;
		}
		output = ptr;
    	return output;
    }

	virtual public unsigned long* getHashCode() {
		return NULL;
	}
};

class child_node : node {

	public child_node(char* v) : super(v) {

	}

	public char* getValue() {
		return (char*) this->value;
	}

	public child_node* getNextChildNode() {
		return (child_node*) getNext();
	}

	virtual char getHardValue() {
		return *this->getValue();
	}

	public child_node* tester(char* ch, int index) {
		this->value = &ch[index];
		return this;
	}
};

typedef child_node* char_list;

void swap(int* a, int* b) {
	int temp = *a;
	*a = *b;
	*b = temp;
}

int max(int a, int b) {
	int output = a > b ? a : b;
	return output;
}

void throwaway() {
	int a = 3, *a_ptr = &a;
	int b = 4, *b_ptr = &b;
	swap(a_p, b_p);

	char_list meep;
	char_list other = meep->tester("hello", 2)->getNextChildNode();

	node n;
	node d;

	double bruh = (double) 5 / 3;
	float d2 = .250 / 5;

	char* str = "Hello World!";
	char c = 'a';
	str = &c;

	child_node* ptr = (child_node*) &(1 ? n : d);

}
