#include "LinkedList.h"

in ll {
	implement Node<T> {
		void* get_value_ptr() {
			return this->value_ptr;
		}

		void set_value_ptr(void* val) {
			this->value_ptr = val;
		}
	}

	implement LinkedList<T> {

		void add(T element) {
			Node<T> n = this->get_nth_node(this->size-1);
			Node<T> next = new Node(element);
			n->next = next;
			next->prev = n;
			++this->size;
		}



		Node<T> get_nth_node(int n) {
			Node<T> ptr = this->head;
			for(int i = 0; i < n; i++) {
				ptr = ptr->next;
			}
			return ptr;
		}

		T get(int index) {
			return this->get_nth_node(index)->get_value_ptr();
		}

		int size() {
			return this->size;
		}

		bool remove_nth_element(int n) {
			if (n < 0 || n >= this->size()) return false;
			Node ptr = this->head;
			for(int i = 0; i < n; i++) {
				ptr = ptr->next;
			}
			Node prev = ptr->prev;
			Node next = ptr->next;

			if(prev != nullptr) {
				prev->next = next;
			} else {
				this->head = next;
			}

			if(next != nullptr) {
				next->prev = prev;
			} else {
				this->tail = prev;
			}


			--this->size;

			return true;
		}

		bool remove(int value) {
			for (int i = 0; i < this->size(); ++i) {
				Node n = this->get_nth_node(i);
				if (*(int *) n->get_value_ptr() == value) {

					return this->remove_nth_element(i);
				}
			}

			return false;
		}
	}
}


bool boolean_test() {
	bool t = !(bool) 0;
	bool f = (bool) 0;
	if(t != true) {
		return false;
	}
	if(f != false) {
		return false;
	}

	return true;
}