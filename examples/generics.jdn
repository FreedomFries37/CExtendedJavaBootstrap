#include <stdint.h>

/*
declaration:
for < generic_params > class <id> ...

generic_params: (? : T | T : ? | T),+

usage:
Canonical type:
<namespaced> (< canonical type list> )?

Usage:
<canonical type>

*/

for <T> class Wrapper {
	private T value;

	public Wrapper() {
		this->value = nullptr;
	}

	public T getValue() {
		return this->value;
	}
	public void setValue(T val) {
		this->value = val;
	}


	public void swap(Wrapper<T> other) {
		T value = other->getValue();
		other->setValue(this->value);
		this->value = value;
	}

};

for <T> T earlyTest(T input) {
	return input;
}

for <T> int getHash(T input) {
	return input->hashcode();
}


for <T> void replace(T* l, T* r) {
	T temp = *l;
	*l = *r;
	*r = temp;
}





int main(int argc, std::String argv[]) {
	std::Object o = new std::Object();

	Wrapper<std::Object> wrapped = new Wrapper<std::Object>();

	int hash = getHash<std::Object>(o);
	std::Int h = new std::Int(hash);
	h->println();

	std::Int l = new std::Int(0);
	std::Int r = new std::Int(1);

	replace<std::Int>(&l, &r);
	l->println();
	r->println();



	return 0;
}
