ast {
top_level_decs {
  typedef [unsigned long int] {
    id $class_id;
  }
  top_level_decs {
    qualifiers_and_specifiers [std::ClassInfo*] {
      specifier [std::ClassInfo*] {
        compound_type_reference {
          class;
          id $ClassInfo;
        }
      }
    }
    declarations {
      function_description [std::ClassInfo*] {
        id $__get_class;
        params {
          dec [class_id] {
            id $id;
          }
        }
      }
    }
  }
  qualifiers_and_specifiers [std::String*] {
    specifier [std::String*] {
      compound_type_reference {
        class;
        id $String;
      }
    }
  }
  typedef [unsigned char] {
    id $bool;
  }
  declarations {
    function_description [void*] {
      id $malloc;
      params {
        dec [unsigned int] {
          id $sz;
        }
      }
    }
  }
  declarations {
    function_description [void*] {
      id $calloc;
      params {
        dec [unsigned int] {
          id $num;
        }
        dec [unsigned int] {
          id $sz;
        }
      }
    }
  }
  declarations {
    function_description [void] {
      id $free;
      params {
        dec [void*] {
          id $ptr;
        }
      }
    }
  }
  declarations {
    function_description [void] {
      id $exit;
      params {
        dec [int] {
          id $status;
        }
      }
    }
  }
  declarations {
    function_description [void] {
      id $panic;
      params {
        dec [std::String*] {
          id $msg;
        }
      }
    }
  }
  declarations {
    function_description [void] {
      id $print;
      params {
        dec [const char*] {
          id $c;
        }
      }
    }
  }
  declarations {
    function_description [void] {
      id $println;
      params {
        dec [const char*] {
          id $c;
        }
      }
    }
  }
  declarations {
    function_description [void] {
      id $print_s;
      params {
        dec [std::String*] {
          id $o;
        }
      }
    }
  }
  declarations {
    function_description [void] {
      id $println_s;
      params {
        dec [std::String*] {
          id $o;
        }
      }
    }
  }
  declarations {
    initialized_declaration {
      dec [const void*] {
        id $nullptr;
      }
      literal $0;
    }
  }
  top_level_decs {
    class_definition [std::Object] {
      id $Object;
      class_level_declarations {
        class_level_declaration {
          visibility::@private;
          declarations {
            dec [std::ClassInfo*] {
              id $info;
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          declarations {
            dec [long int] {
              id $references;
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          constructor_definition [std::Object*] {
            treeType $Object;
            params;
            empty;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [int] {
            virtual;
            id $hashcode;
            params;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [bool] {
            virtual;
            id $equals;
            params {
              dec [std::Object*] {
                id $other;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [void] {
            virtual;
            id $drop;
            params;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [std::String*] {
            virtual;
            id $toString;
            params;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [std::ClassInfo*] {
            id $getClass;
            params;
          }
        }
      }
      compilation_tag_list {
        compilation_tag {
          id $setAsDefaultInheritance;
          empty;
        }
      }
    }
    class_definition [std::ClassInfo] {
      id $ClassInfo;
      class_level_declarations {
        class_level_declaration {
          visibility::@private;
          declarations {
            dec [std::String*] {
              id $name;
            }
          }
        }
        class_level_declaration {
          visibility::@private;
          declarations {
            dec [std::ClassInfo*] {
              id $parent;
            }
          }
        }
        class_level_declaration {
          visibility::@private;
          declarations {
            dec [int] {
              id $classHash;
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          constructor_definition [std::ClassInfo*] {
            treeType $ClassInfo;
            params;
            empty;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [std::String*] {
            id $getName;
            params;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [bool] {
            id $is_object;
            params {
              dec [std::Object] {
                id $o;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@private;
          function_description [bool] {
            id $is_class;
            params {
              dec [std::ClassInfo*] {
                id $o;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [bool] {
            virtual;
            id $equals;
            params {
              dec [std::Object] {
                id $other;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [bool] {
            virtual;
            id $equals;
            params {
              dec [std::ClassInfo*] {
                id $other;
              }
            }
          }
        }
      }
    }
    class_definition [std::String] {
      id $String;
      class_level_declarations {
        class_level_declaration {
          visibility::@internal;
          declarations {
            dec [char*] {
              id $backingPtr;
            }
          }
        }
        class_level_declaration {
          visibility::@internal;
          declarations {
            dec [int] {
              id $length;
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          constructor_definition [std::String*] {
            treeType $String;
            params {
              dec [const char*] {
                id $bp;
              }
            }
            empty;
          }
        }
        class_level_declaration {
          visibility::@public;
          constructor_definition [std::String*] {
            treeType $String;
            params;
            empty;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [void] {
            virtual;
            id $drop;
            params;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [std::String*] {
            id $concat;
            params {
              dec [std::String*] {
                id $other;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [std::String*] {
            id $concat;
            params {
              dec [char*] {
                id $other;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [std::String*] {
            id $concat_integer;
            params {
              dec [long int] {
                id $other;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [const char*] {
            id $getCStr;
            params;
          }
        }
      }
    }
  }
  top_level_decs {
    class_definition [ll::Node] {
      id $Node;
      class_level_declarations {
        class_level_declaration {
          visibility::@private;
          declarations {
            dec [void*] {
              id $value_ptr;
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          declarations {
            dec [ll::Node*] {
              id $prev;
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          declarations {
            dec [ll::Node*] {
              id $next;
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          constructor_definition [ll::Node*] {
            treeType $Node;
            params {
              dec [void*] {
                id $value_ptr;
              }
            }
            compound_statement {
              assign {
                field_get {
                  indirection {
                    id $this;
                  }
                  id $value_ptr;
                }
                assign_type::@=;
                id $value_ptr;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [void*] {
            id $get_value_ptr;
            params;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [void] {
            id $set_value_ptr;
            params {
              dec [void*] {
                id $val;
              }
            }
          }
        }
      }
    }
    class_definition [ll::IntLinkedList] {
      id $IntLinkedList;
      class_level_declarations {
        class_level_declaration {
          visibility::@private;
          declarations {
            dec [ll::Node] {
              id $head;
            }
          }
        }
        class_level_declaration {
          visibility::@private;
          declarations {
            dec [ll::Node] {
              id $tail;
            }
          }
        }
        class_level_declaration {
          visibility::@private;
          declarations {
            dec [int] {
              id $size;
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          constructor_definition [ll::IntLinkedList*] {
            treeType $IntLinkedList;
            params;
            compound_statement {
              assign {
                field_get {
                  indirection {
                    id $this;
                  }
                  id $head;
                }
                assign_type::@=;
                literal $0;
              }
              assign {
                field_get {
                  indirection {
                    id $this;
                  }
                  id $tail;
                }
                assign_type::@=;
                literal $0;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [void] {
            id $add;
            params {
              dec [int] {
                id $element;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [int] {
            id $get;
            params {
              dec [int] {
                id $index;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [int] {
            id $size;
            params;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [bool] {
            id $remove;
            params {
              dec [int] {
                id $value;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [bool] {
            id $remove_nth_element;
            params {
              dec [int] {
                id $n;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@private;
          function_description [ll::Node] {
            id $get_nth_node;
            params {
              dec [int] {
                id $n;
              }
            }
          }
        }
      }
    }
  }
  declarations {
    function_description [bool] {
      id $boolean_test;
      params;
    }
  }
  top_level_decs {
    implement [ll::Node] {
      function_definition [void*] {
        implementing [ll::Node] {
          treeType $Node;
        }
        id $get_value_ptr;
        params;
        compound_statement {
          return {
            field_get {
              indirection {
                id $this;
              }
              id $value_ptr;
            }
          }
        }
      }
      function_definition [void] {
        implementing [ll::Node] {
          treeType $Node;
        }
        id $set_value_ptr;
        params {
          dec [void*] {
            id $val;
          }
        }
        compound_statement {
          assign {
            field_get {
              indirection {
                id $this;
              }
              id $value_ptr;
            }
            assign_type::@=;
            id $val;
          }
        }
      }
    }
    implement [ll::IntLinkedList] {
      function_definition [void] {
        implementing [ll::IntLinkedList] {
          treeType $IntLinkedList;
        }
        id $add;
        params {
          dec [int] {
            id $element;
          }
        }
        compound_statement {
          declarations {
            initialized_declaration {
              dec [ll::Node] {
                id $n;
              }
              method_call {
                indirection {
                  id $this;
                }
                id $get_nth_node;
                sequence {
                  binop {
                    op::@-;
                    field_get {
                      indirection {
                        id $this;
                      }
                      id $size;
                    }
                    literal $1;
                  }
                }
              }
            }
          }
          declarations {
            initialized_declaration {
              dec [int*] {
                id $val;
              }
              func_call {
                id $malloc;
                sequence {
                  sizeof [int];
                }
              }
            }
          }
          assign {
            indirection {
              id $val;
            }
            assign_type::@=;
            id $element;
          }
          declarations {
            initialized_declaration {
              dec [ll::Node] {
                id $next;
              }
              constructor_call::@new [ll::Node] {
                sequence {
                  id $val;
                }
              }
            }
          }
          assign {
            field_get {
              indirection {
                id $n;
              }
              id $next;
            }
            assign_type::@=;
            id $next;
          }
          assign {
            field_get {
              indirection {
                id $next;
              }
              id $prev;
            }
            assign_type::@=;
            id $n;
          }
          uniop {
            op::@++;
            field_get {
              indirection {
                id $this;
              }
              id $size;
            }
          }
        }
      }
      function_definition [ll::Node] {
        implementing [ll::IntLinkedList] {
          treeType $IntLinkedList;
        }
        id $get_nth_node;
        params {
          dec [int] {
            id $n;
          }
        }
        compound_statement {
          declarations {
            initialized_declaration {
              dec [ll::Node] {
                id $ptr;
              }
              field_get {
                indirection {
                  id $this;
                }
                id $head;
              }
            }
          }
          for {
            declarations {
              initialized_declaration {
                dec [int] {
                  id $i;
                }
                literal $0;
              }
            }
            binop {
              op::@<;
              id $i;
              id $n;
            }
            postop {
              id $i;
              op::@++;
            }
            compound_statement {
              assign {
                id $ptr;
                assign_type::@=;
                field_get {
                  indirection {
                    id $ptr;
                  }
                  id $next;
                }
              }
            }
          }
          return {
            id $ptr;
          }
        }
      }
      function_definition [int] {
        implementing [ll::IntLinkedList] {
          treeType $IntLinkedList;
        }
        id $get;
        params {
          dec [int] {
            id $index;
          }
        }
        compound_statement {
          return {
            indirection {
              cast [int*] {
                method_call {
                  indirection {
                    method_call {
                      indirection {
                        id $this;
                      }
                      id $get_nth_node;
                      sequence {
                        id $index;
                      }
                    }
                  }
                  id $get_value_ptr;
                  sequence;
                }
              }
            }
          }
        }
      }
      function_definition [int] {
        implementing [ll::IntLinkedList] {
          treeType $IntLinkedList;
        }
        id $size;
        params;
        compound_statement {
          return {
            field_get {
              indirection {
                id $this;
              }
              id $size;
            }
          }
        }
      }
      function_definition [bool] {
        implementing [ll::IntLinkedList] {
          treeType $IntLinkedList;
        }
        id $remove_nth_element;
        params {
          dec [int] {
            id $n;
          }
        }
        compound_statement {
          if {
            binop {
              op::@||;
              binop {
                op::@<;
                id $n;
                literal $0;
              }
              binop {
                op::@>=;
                id $n;
                method_call {
                  indirection {
                    id $this;
                  }
                  id $size;
                  sequence;
                }
              }
            }
            return {
              false;
            }
            empty;
          }
          declarations {
            initialized_declaration {
              dec [ll::Node] {
                id $ptr;
              }
              field_get {
                indirection {
                  id $this;
                }
                id $head;
              }
            }
          }
          for {
            declarations {
              initialized_declaration {
                dec [int] {
                  id $i;
                }
                literal $0;
              }
            }
            binop {
              op::@<;
              id $i;
              id $n;
            }
            postop {
              id $i;
              op::@++;
            }
            compound_statement {
              assign {
                id $ptr;
                assign_type::@=;
                field_get {
                  indirection {
                    id $ptr;
                  }
                  id $next;
                }
              }
            }
          }
          declarations {
            initialized_declaration {
              dec [ll::Node] {
                id $prev;
              }
              field_get {
                indirection {
                  id $ptr;
                }
                id $prev;
              }
            }
          }
          declarations {
            initialized_declaration {
              dec [ll::Node] {
                id $next;
              }
              field_get {
                indirection {
                  id $ptr;
                }
                id $next;
              }
            }
          }
          if {
            binop {
              op::@!=;
              id $prev;
              id $nullptr;
            }
            compound_statement {
              assign {
                field_get {
                  indirection {
                    id $prev;
                  }
                  id $next;
                }
                assign_type::@=;
                id $next;
              }
            }
            compound_statement {
              assign {
                field_get {
                  indirection {
                    id $this;
                  }
                  id $head;
                }
                assign_type::@=;
                id $next;
              }
            }
          }
          if {
            binop {
              op::@!=;
              id $next;
              id $nullptr;
            }
            compound_statement {
              assign {
                field_get {
                  indirection {
                    id $next;
                  }
                  id $prev;
                }
                assign_type::@=;
                id $prev;
              }
            }
            compound_statement {
              assign {
                field_get {
                  indirection {
                    id $this;
                  }
                  id $tail;
                }
                assign_type::@=;
                id $prev;
              }
            }
          }
          uniop {
            op::@--;
            field_get {
              indirection {
                id $this;
              }
              id $size;
            }
          }
          return {
            true;
          }
        }
      }
      function_definition [bool] {
        implementing [ll::IntLinkedList] {
          treeType $IntLinkedList;
        }
        id $remove;
        params {
          dec [int] {
            id $value;
          }
        }
        compound_statement {
          for {
            declarations {
              initialized_declaration {
                dec [int] {
                  id $i;
                }
                literal $0;
              }
            }
            binop {
              op::@<;
              id $i;
              method_call {
                indirection {
                  id $this;
                }
                id $size;
                sequence;
              }
            }
            uniop {
              op::@++;
              id $i;
            }
            compound_statement {
              declarations {
                initialized_declaration {
                  dec [ll::Node] {
                    id $n;
                  }
                  method_call {
                    indirection {
                      id $this;
                    }
                    id $get_nth_node;
                    sequence {
                      id $i;
                    }
                  }
                }
              }
              if {
                binop {
                  op::@==;
                  indirection {
                    cast [int*] {
                      method_call {
                        indirection {
                          id $n;
                        }
                        id $get_value_ptr;
                        sequence;
                      }
                    }
                  }
                  id $value;
                }
                compound_statement {
                  return {
                    method_call {
                      indirection {
                        id $this;
                      }
                      id $remove_nth_element;
                      sequence {
                        id $i;
                      }
                    }
                  }
                }
                empty;
              }
            }
          }
          return {
            false;
          }
        }
      }
    }
  }
  function_definition [bool] {
    empty;
    id $boolean_test;
    params;
    compound_statement {
      declarations {
        initialized_declaration {
          dec [bool] {
            id $t;
          }
          uniop {
            op::@!;
            cast [bool] {
              literal $0;
            }
          }
        }
      }
      declarations {
        initialized_declaration {
          dec [bool] {
            id $f;
          }
          cast [bool] {
            literal $0;
          }
        }
      }
      if {
        binop {
          op::@!=;
          id $t;
          true;
        }
        compound_statement {
          return {
            false;
          }
        }
        empty;
      }
      if {
        binop {
          op::@!=;
          id $f;
          false;
        }
        compound_statement {
          return {
            false;
          }
        }
        empty;
      }
      return {
        true;
      }
    }
  }
}
}
