ast {
top_level_decs {
  typedef [unsigned long int] {
    id $class_id;
  }
  top_level_decs {
    qualifiers_and_specifiers [std::ClassInfo*] {
      specifier [std::ClassInfo*] {
        compound_type_reference {
          class;
          id $ClassInfo;
        }
      }
    }
    declarations {
      function_description [std::ClassInfo*] {
        id $__get_class;
        params {
          dec [class_id] {
            id $id;
          }
        }
      }
    }
  }
  qualifiers_and_specifiers [std::String*] {
    specifier [std::String*] {
      compound_type_reference {
        class;
        id $String;
      }
    }
  }
  typedef [unsigned char] {
    id $bool;
  }
  declarations {
    function_description [void*] {
      id $malloc;
      params {
        dec [unsigned int] {
          id $sz;
        }
      }
    }
  }
  declarations {
    function_description [void*] {
      id $calloc;
      params {
        dec [unsigned int] {
          id $num;
        }
        dec [unsigned int] {
          id $sz;
        }
      }
    }
  }
  declarations {
    function_description [void] {
      id $free;
      params {
        dec [void*] {
          id $ptr;
        }
      }
    }
  }
  declarations {
    function_description [void] {
      id $exit;
      params {
        dec [int] {
          id $status;
        }
      }
    }
  }
  declarations {
    function_description [void] {
      id $panic;
      params {
        dec [std::String*] {
          id $msg;
        }
      }
    }
  }
  declarations {
    function_description [void] {
      id $print;
      params {
        dec [const char*] {
          id $c;
        }
      }
    }
  }
  declarations {
    function_description [void] {
      id $println;
      params {
        dec [const char*] {
          id $c;
        }
      }
    }
  }
  declarations {
    function_description [void] {
      id $print_s;
      params {
        dec [std::String*] {
          id $o;
        }
      }
    }
  }
  declarations {
    function_description [void] {
      id $println_s;
      params {
        dec [std::String*] {
          id $o;
        }
      }
    }
  }
  declarations {
    initialized_declaration {
      dec [const void*] {
        id $nullptr;
      }
      literal $0;
    }
  }
  top_level_decs {
    class_definition [std::Object] {
      id $Object;
      class_level_declarations {
        class_level_declaration {
          visibility::@private;
          declarations {
            dec [std::ClassInfo*] {
              id $info;
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          declarations {
            dec [long int] {
              id $references;
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          constructor_definition [std::Object*] {
            treeType $Object;
            params;
            empty;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [int] {
            virtual;
            id $hashcode;
            params;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [bool] {
            virtual;
            id $equals;
            params {
              dec [std::Object*] {
                id $other;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [void] {
            virtual;
            id $drop;
            params;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [std::String*] {
            virtual;
            id $toString;
            params;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [std::ClassInfo*] {
            id $getClass;
            params;
          }
        }
      }
      compilation_tag_list {
        compilation_tag {
          id $setAsDefaultInheritance;
          empty;
        }
      }
    }
    class_definition [std::ClassInfo] {
      id $ClassInfo;
      class_level_declarations {
        class_level_declaration {
          visibility::@private;
          declarations {
            dec [std::String*] {
              id $name;
            }
          }
        }
        class_level_declaration {
          visibility::@private;
          declarations {
            dec [std::ClassInfo*] {
              id $parent;
            }
          }
        }
        class_level_declaration {
          visibility::@private;
          declarations {
            dec [int] {
              id $classHash;
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          constructor_definition [std::ClassInfo*] {
            treeType $ClassInfo;
            params;
            empty;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [std::String*] {
            id $getName;
            params;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [bool] {
            id $is_object;
            params {
              dec [std::Object] {
                id $o;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@private;
          function_description [bool] {
            id $is_class;
            params {
              dec [std::ClassInfo*] {
                id $o;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [bool] {
            virtual;
            id $equals;
            params {
              dec [std::Object] {
                id $other;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [bool] {
            virtual;
            id $equals;
            params {
              dec [std::ClassInfo*] {
                id $other;
              }
            }
          }
        }
      }
    }
    class_definition [std::String] {
      id $String;
      class_level_declarations {
        class_level_declaration {
          visibility::@internal;
          declarations {
            dec [char*] {
              id $backingPtr;
            }
          }
        }
        class_level_declaration {
          visibility::@internal;
          declarations {
            dec [int] {
              id $length;
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          constructor_definition [std::String*] {
            treeType $String;
            params {
              dec [const char*] {
                id $bp;
              }
            }
            empty;
          }
        }
        class_level_declaration {
          visibility::@public;
          constructor_definition [std::String*] {
            treeType $String;
            params;
            empty;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [void] {
            virtual;
            id $drop;
            params;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [std::String*] {
            id $concat;
            params {
              dec [std::String*] {
                id $other;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [std::String*] {
            id $concat;
            params {
              dec [char*] {
                id $other;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [std::String*] {
            id $concat_integer;
            params {
              dec [long int] {
                id $other;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [const char*] {
            id $getCStr;
            params;
          }
        }
      }
    }
  }
  typedef [unsigned long int] {
    id $size_t;
  }
  declarations {
    function_description [void*] {
      id $memcpy;
      params {
        dec [void*] {
          id $destination;
        }
        dec [const void*] {
          id $source;
        }
        dec [size_t] {
          id $num;
        }
      }
    }
  }
  declarations {
    function_description [void*] {
      id $memmove;
      params {
        dec [void*] {
          id $destination;
        }
        dec [const void*] {
          id $source;
        }
        dec [size_t] {
          id $num;
        }
      }
    }
  }
  declarations {
    function_description [char*] {
      id $strcpy;
      params {
        dec [char*] {
          id $destination;
        }
        dec [const char*] {
          id $source;
        }
      }
    }
  }
  declarations {
    function_description [char*] {
      id $strncpy;
      params {
        dec [char*] {
          id $destination;
        }
        dec [const char*] {
          id $source;
        }
        dec [size_t] {
          id $num;
        }
      }
    }
  }
  declarations {
    function_description [char*] {
      id $strcat;
      params {
        dec [char*] {
          id $destination;
        }
        dec [const char*] {
          id $source;
        }
      }
    }
  }
  declarations {
    function_description [char*] {
      id $strncat;
      params {
        dec [char*] {
          id $destination;
        }
        dec [const char*] {
          id $source;
        }
        dec [size_t] {
          id $num;
        }
      }
    }
  }
  declarations {
    function_description [int] {
      id $memcmp;
      params {
        dec [const void*] {
          id $ptr1;
        }
        dec [const void*] {
          id $ptr2;
        }
        dec [size_t] {
          id $num;
        }
      }
    }
  }
  declarations {
    function_description [int] {
      id $strcmp;
      params {
        dec [const char*] {
          id $str1;
        }
        dec [const char*] {
          id $str2;
        }
      }
    }
  }
  declarations {
    function_description [int] {
      id $strcoll;
      params {
        dec [const char*] {
          id $str1;
        }
        dec [const char*] {
          id $str2;
        }
      }
    }
  }
  declarations {
    function_description [int] {
      id $strncmp;
      params {
        dec [const char*] {
          id $str1;
        }
        dec [const char*] {
          id $str2;
        }
        dec [size_t] {
          id $num;
        }
      }
    }
  }
  declarations {
    function_description [size_t] {
      id $strxfrm;
      params {
        dec [char*] {
          id $destination;
        }
        dec [const char*] {
          id $source;
        }
        dec [size_t] {
          id $num;
        }
      }
    }
  }
  declarations {
    function_description [char*] {
      id $strdup;
      params {
        dec [const char*] {
          id $str1;
        }
      }
    }
  }
  declarations {
    function_description [size_t] {
      id $strlen;
      params {
        dec [const char*] {
          id $str;
        }
      }
    }
  }
  function_definition [void] {
    empty;
    id $print;
    params {
      dec [const char*] {
        id $c;
      }
    }
    compound_statement;
  }
  function_definition [void] {
    empty;
    id $println;
    params {
      dec [const char*] {
        id $c;
      }
    }
    compound_statement;
  }
  function_definition [void] {
    empty;
    id $print_s;
    params {
      dec [std::String] {
        id $o;
      }
    }
    compound_statement;
  }
  function_definition [void] {
    empty;
    id $println_s;
    params {
      dec [std::String] {
        id $o;
      }
    }
    compound_statement;
  }
  top_level_decs {
    implement [std::Object] {
      constructor_definition [std::Object] {
        treeType $Object;
        params;
        compound_statement;
      }
      function_definition [int] {
        implementing [std::Object] {
          treeType $Object;
        }
        id $hashcode;
        params;
        compound_statement {
          return {
            cast [int] {
              cast [void*] {
                id $this;
              }
            }
          }
        }
      }
      function_definition [bool] {
        implementing [std::Object] {
          treeType $Object;
        }
        id $equals;
        params {
          dec [std::Object] {
            id $other;
          }
        }
        compound_statement {
          return {
            binop {
              op::@==;
              id $this;
              id $other;
            }
          }
        }
      }
      function_definition [std::String] {
        implementing [std::Object] {
          treeType $Object;
        }
        id $toString;
        params;
        compound_statement {
          return {
            method_call {
              indirection {
                method_call {
                  indirection {
                    method_call {
                      indirection {
                        method_call {
                          indirection {
                            id $this;
                          }
                          id $getClass;
                          sequence;
                        }
                      }
                      id $getName;
                      sequence;
                    }
                  }
                  id $concat;
                  sequence {
                    string $"@";
                  }
                }
              }
              id $concat;
              sequence {
                method_call {
                  indirection {
                    id $this;
                  }
                  id $hashcode;
                  sequence;
                }
              }
            }
          }
        }
      }
      function_definition [void] {
        implementing [std::Object] {
          treeType $Object;
        }
        id $drop;
        params;
        compound_statement {
          func_call {
            id $free;
            sequence {
              id $this;
            }
          }
        }
      }
      function_definition [std::ClassInfo] {
        implementing [std::Object] {
          treeType $Object;
        }
        id $getClass;
        params;
        compound_statement {
          return {
            field_get {
              indirection {
                id $this;
              }
              id $info;
            }
          }
        }
      }
    }
    implement [std::ClassInfo] {
      constructor_definition [std::ClassInfo] {
        treeType $ClassInfo;
        params;
        compound_statement;
      }
      function_definition [std::String] {
        implementing [std::ClassInfo] {
          treeType $ClassInfo;
        }
        id $getName;
        params;
        compound_statement {
          return {
            field_get {
              indirection {
                id $this;
              }
              id $name;
            }
          }
        }
      }
      function_definition [bool] {
        implementing [std::ClassInfo] {
          treeType $ClassInfo;
        }
        id $is_object;
        params {
          dec [std::Object] {
            id $o;
          }
        }
        compound_statement {
          if {
            binop {
              op::@==;
              id $o;
              id $nullptr;
            }
            return {
              false;
            }
            empty;
          }
          return {
            method_call {
              indirection {
                id $this;
              }
              id $is_class;
              sequence {
                method_call {
                  indirection {
                    id $o;
                  }
                  id $getClass;
                  sequence;
                }
              }
            }
          }
        }
      }
      function_definition [bool] {
        implementing [std::ClassInfo] {
          treeType $ClassInfo;
        }
        id $is_class;
        params {
          dec [std::ClassInfo] {
            id $o;
          }
        }
        compound_statement {
          if {
            method_call {
              indirection {
                id $o;
              }
              id $equals;
              sequence {
                id $this;
              }
            }
            return {
              true;
            }
            empty;
          }
          if {
            binop {
              op::@!=;
              field_get {
                indirection {
                  id $o;
                }
                id $parent;
              }
              id $nullptr;
            }
            compound_statement {
              return {
                method_call {
                  indirection {
                    id $this;
                  }
                  id $is_class;
                  sequence {
                    field_get {
                      indirection {
                        id $o;
                      }
                      id $parent;
                    }
                  }
                }
              }
            }
            empty;
          }
          return {
            false;
          }
        }
      }
      function_definition [bool] {
        implementing [std::ClassInfo] {
          treeType $ClassInfo;
        }
        id $equals;
        params {
          dec [std::Object] {
            id $other;
          }
        }
        compound_statement {
          if {
            uniop {
              op::@!;
              id $other;
            }
            return {
              false;
            }
            empty;
          }
          if {
            uniop {
              op::@!;
              method_call {
                indirection {
                  method_call {
                    indirection {
                      id $this;
                    }
                    id $getClass;
                    sequence;
                  }
                }
                id $is_object;
                sequence {
                  id $other;
                }
              }
            }
            return {
              false;
            }
            empty;
          }
          return {
            method_call {
              indirection {
                id $this;
              }
              id $equals;
              sequence {
                cast [std::ClassInfo] {
                  id $other;
                }
              }
            }
          }
        }
      }
      function_definition [bool] {
        implementing [std::ClassInfo] {
          treeType $ClassInfo;
        }
        id $equals;
        params {
          dec [std::ClassInfo] {
            id $other;
          }
        }
        compound_statement {
          return {
            binop {
              op::@==;
              field_get {
                indirection {
                  id $this;
                }
                id $classHash;
              }
              field_get {
                indirection {
                  id $other;
                }
                id $classHash;
              }
            }
          }
        }
      }
    }
    implement [std::String] {
      constructor_definition [std::String] {
        treeType $String;
        params;
        id $this;
        sequence {
          string $"";
        }
        compound_statement;
      }
      constructor_definition [std::String] {
        treeType $String;
        params {
          dec [const char*] {
            id $bp;
          }
        }
        compound_statement {
          assign {
            field_get {
              indirection {
                id $this;
              }
              id $backingPtr;
            }
            assign_type::@=;
            func_call {
              id $strdup;
              sequence {
                id $bp;
              }
            }
          }
          assign {
            field_get {
              indirection {
                id $this;
              }
              id $length;
            }
            assign_type::@=;
            func_call {
              id $strlen;
              sequence {
                id $bp;
              }
            }
          }
        }
      }
      function_definition [void] {
        implementing [std::String] {
          treeType $String;
        }
        id $drop;
        params;
        compound_statement {
          method_call {
            indirection {
              super;
            }
            id $drop;
            sequence;
          }
        }
      }
      function_definition [std::String] {
        implementing [std::String] {
          treeType $String;
        }
        id $concat;
        params {
          dec [std::String] {
            id $other;
          }
        }
        compound_statement {
          declarations {
            dec [char[binop { op::@+; binop { op::@+; field_get { indirection { id $this; } id $length; } field_get { indirection { id $other; } id $length; } } literal $1; }] {
              id $next;
              binop {
                op::@+;
                binop {
                  op::@+;
                  field_get {
                    indirection {
                      id $this;
                    }
                    id $length;
                  }
                  field_get {
                    indirection {
                      id $other;
                    }
                    id $length;
                  }
                }
                literal $1;
              }
            }
          }
          func_call {
            id $strcpy;
            sequence {
              id $next;
              field_get {
                indirection {
                  id $this;
                }
                id $backingPtr;
              }
            }
          }
          func_call {
            id $strcat;
            sequence {
              id $next;
              field_get {
                indirection {
                  id $other;
                }
                id $backingPtr;
              }
            }
          }
          return {
            constructor_call::@new [std::String] {
              sequence {
                id $next;
              }
            }
          }
        }
      }
      function_definition [std::String] {
        implementing [std::String] {
          treeType $String;
        }
        id $concat;
        params {
          dec [char*] {
            id $other;
          }
        }
        compound_statement {
          return {
            id $this;
          }
        }
      }
      function_definition [const char*] {
        implementing [std::String] {
          treeType $String;
        }
        id $getCStr;
        params;
        compound_statement {
          return {
            field_get {
              indirection {
                id $this;
              }
              id $backingPtr;
            }
          }
        }
      }
      function_definition [std::String] {
        implementing [std::String] {
          treeType $String;
        }
        id $concat_integer;
        params {
          dec [long int] {
            id $other;
          }
        }
        compound_statement {
          return {
            id $this;
          }
        }
      }
    }
  }
}
}
