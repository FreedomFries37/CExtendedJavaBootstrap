ast {
top_level_decs {
  typedef [unsigned long int] {
    id $class_id;
  }
  top_level_decs {
    qualifiers_and_specifiers [std::ClassInfo*] {
      specifier [std::ClassInfo*] {
        compound_type_reference {
          class;
          id $ClassInfo;
        }
      }
    }
    declarations {
      function_description [std::ClassInfo*] {
        id $__get_class;
        params {
          dec [class_id] {
            id $id;
          }
        }
      }
    }
  }
  qualifiers_and_specifiers [std::String*] {
    specifier [std::String*] {
      compound_type_reference {
        class;
        id $String;
      }
    }
  }
  typedef [unsigned char] {
    id $bool;
  }
  declarations {
    function_description [void*] {
      id $malloc;
      params {
        dec [unsigned int] {
          id $sz;
        }
      }
    }
  }
  declarations {
    function_description [void*] {
      id $calloc;
      params {
        dec [unsigned int] {
          id $num;
        }
        dec [unsigned int] {
          id $sz;
        }
      }
    }
  }
  declarations {
    function_description [void] {
      id $free;
      params {
        dec [void*] {
          id $ptr;
        }
      }
    }
  }
  declarations {
    function_description [void] {
      id $exit;
      params {
        dec [int] {
          id $status;
        }
      }
    }
  }
  declarations {
    function_description [void] {
      id $panic;
      params {
        dec [std::String*] {
          id $msg;
        }
      }
    }
  }
  declarations {
    function_description [void] {
      id $print;
      params {
        dec [const char*] {
          id $c;
        }
      }
    }
  }
  declarations {
    function_description [void] {
      id $println;
      params {
        dec [const char*] {
          id $c;
        }
      }
    }
  }
  declarations {
    function_description [void] {
      id $print_s;
      params {
        dec [std::String*] {
          id $o;
        }
      }
    }
  }
  declarations {
    function_description [void] {
      id $println_s;
      params {
        dec [std::String*] {
          id $o;
        }
      }
    }
  }
  declarations {
    initialized_declaration {
      dec [const void*] {
        id $nullptr;
      }
      literal $0;
    }
  }
  top_level_decs {
    class_definition [std::Object] {
      id $Object;
      class_level_declarations {
        class_level_declaration {
          visibility::@private;
          declarations {
            dec [std::ClassInfo*] {
              id $info;
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          declarations {
            dec [long int] {
              id $references;
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          constructor_definition [std::Object*] {
            treeType $Object;
            params;
            empty;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [int] {
            virtual;
            id $hashcode;
            params;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [bool] {
            virtual;
            id $equals;
            params {
              dec [std::Object*] {
                id $other;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [void] {
            virtual;
            id $drop;
            params;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [std::String*] {
            virtual;
            id $toString;
            params;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [std::ClassInfo*] {
            id $getClass;
            params;
          }
        }
      }
      compilation_tag_list {
        compilation_tag {
          id $setAsDefaultInheritance;
          empty;
        }
      }
    }
    class_definition [std::ClassInfo] {
      id $ClassInfo;
      class_level_declarations {
        class_level_declaration {
          visibility::@private;
          declarations {
            dec [std::String*] {
              id $name;
            }
          }
        }
        class_level_declaration {
          visibility::@private;
          declarations {
            dec [std::ClassInfo*] {
              id $parent;
            }
          }
        }
        class_level_declaration {
          visibility::@private;
          declarations {
            dec [int] {
              id $classHash;
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          constructor_definition [std::ClassInfo*] {
            treeType $ClassInfo;
            params;
            empty;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [std::String*] {
            id $getName;
            params;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [bool] {
            id $is_object;
            params {
              dec [std::Object] {
                id $o;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@private;
          function_description [bool] {
            id $is_class;
            params {
              dec [std::ClassInfo*] {
                id $o;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [bool] {
            virtual;
            id $equals;
            params {
              dec [std::Object] {
                id $other;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [bool] {
            virtual;
            id $equals;
            params {
              dec [std::ClassInfo*] {
                id $other;
              }
            }
          }
        }
      }
    }
    class_definition [std::String] {
      id $String;
      class_level_declarations {
        class_level_declaration {
          visibility::@internal;
          declarations {
            dec [char*] {
              id $backingPtr;
            }
          }
        }
        class_level_declaration {
          visibility::@internal;
          declarations {
            dec [int] {
              id $length;
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          constructor_definition [std::String*] {
            treeType $String;
            params {
              dec [const char*] {
                id $bp;
              }
            }
            empty;
          }
        }
        class_level_declaration {
          visibility::@public;
          constructor_definition [std::String*] {
            treeType $String;
            params;
            empty;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [void] {
            virtual;
            id $drop;
            params;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [std::String*] {
            id $concat;
            params {
              dec [std::String*] {
                id $other;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [std::String*] {
            id $concat;
            params {
              dec [char*] {
                id $other;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [std::String*] {
            id $concat_integer;
            params {
              dec [long int] {
                id $other;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [const char*] {
            id $getCStr;
            params;
          }
        }
      }
    }
  }
  typedef [unsigned long int] {
    id $size_t;
  }
  declarations {
    function_description [void*] {
      id $memcpy;
      params {
        dec [void*] {
          id $destination;
        }
        dec [const void*] {
          id $source;
        }
        dec [size_t] {
          id $num;
        }
      }
    }
  }
  declarations {
    function_description [void*] {
      id $memmove;
      params {
        dec [void*] {
          id $destination;
        }
        dec [const void*] {
          id $source;
        }
        dec [size_t] {
          id $num;
        }
      }
    }
  }
  declarations {
    function_description [char*] {
      id $strcpy;
      params {
        dec [char*] {
          id $destination;
        }
        dec [const char*] {
          id $source;
        }
      }
    }
  }
  declarations {
    function_description [char*] {
      id $strncpy;
      params {
        dec [char*] {
          id $destination;
        }
        dec [const char*] {
          id $source;
        }
        dec [size_t] {
          id $num;
        }
      }
    }
  }
  declarations {
    function_description [char*] {
      id $strcat;
      params {
        dec [char*] {
          id $destination;
        }
        dec [const char*] {
          id $source;
        }
      }
    }
  }
  declarations {
    function_description [char*] {
      id $strncat;
      params {
        dec [char*] {
          id $destination;
        }
        dec [const char*] {
          id $source;
        }
        dec [size_t] {
          id $num;
        }
      }
    }
  }
  declarations {
    function_description [int] {
      id $memcmp;
      params {
        dec [const void*] {
          id $ptr1;
        }
        dec [const void*] {
          id $ptr2;
        }
        dec [size_t] {
          id $num;
        }
      }
    }
  }
  declarations {
    function_description [int] {
      id $strcmp;
      params {
        dec [const char*] {
          id $str1;
        }
        dec [const char*] {
          id $str2;
        }
      }
    }
  }
  declarations {
    function_description [int] {
      id $strcoll;
      params {
        dec [const char*] {
          id $str1;
        }
        dec [const char*] {
          id $str2;
        }
      }
    }
  }
  declarations {
    function_description [int] {
      id $strncmp;
      params {
        dec [const char*] {
          id $str1;
        }
        dec [const char*] {
          id $str2;
        }
        dec [size_t] {
          id $num;
        }
      }
    }
  }
  declarations {
    function_description [size_t] {
      id $strxfrm;
      params {
        dec [char*] {
          id $destination;
        }
        dec [const char*] {
          id $source;
        }
        dec [size_t] {
          id $num;
        }
      }
    }
  }
  declarations {
    function_description [char*] {
      id $strdup;
      params {
        dec [const char*] {
          id $str1;
        }
      }
    }
  }
  declarations {
    function_description [size_t] {
      id $strlen;
      params {
        dec [const char*] {
          id $str;
        }
      }
    }
  }
  typedef [unsigned char] {
    id $byte;
  }
  qualifiers_and_specifiers [struct j_heap { byte* jheap; size_t size; size_t bytes_free; }] {
    specifier [struct j_heap { byte* jheap; size_t size; size_t bytes_free; }] {
      struct/union_dec {
        struct;
        id $j_heap;
        struct/union_field_declarations {
          struct/union_field_declaration [byte*] {
            id $jheap;
          }
          struct/union_field_declaration [size_t] {
            id $size;
          }
          struct/union_field_declaration [size_t] {
            id $bytes_free;
          }
        }
      }
    }
  }
  declarations {
    dec [struct j_heap { byte* jheap; size_t size; size_t bytes_free; }] {
      id $jodin_heap;
    }
  }
  function_definition [void] {
    empty;
    id $panic;
    params {
      dec [std::String] {
        id $message;
      }
    }
    compound_statement {
      func_call {
        id $println_s;
        sequence {
          id $message;
        }
      }
      func_call {
        id $exit;
        sequence {
          uniop {
            op::@-;
            literal $1;
          }
        }
      }
    }
  }
  function_definition [bool] {
    empty;
    id $__init_heap;
    params;
    compound_statement {
      assign {
        field_get {
          id $jodin_heap;
          id $jheap;
        }
        assign_type::@=;
        func_call {
          id $calloc;
          sequence {
            sizeof [byte];
            binop {
              op::@*;
              literal $1028;
              binop {
                op::@*;
                literal $1028;
                literal $128;
              }
            }
          }
        }
      }
      if {
        binop {
          op::@==;
          field_get {
            id $jodin_heap;
            id $jheap;
          }
          id $nullptr;
        }
        compound_statement {
          return {
            false;
          }
        }
        empty;
      }
      assign {
        field_get {
          id $jodin_heap;
          id $size;
        }
        assign_type::@=;
        binop {
          op::@*;
          literal $1028;
          binop {
            op::@*;
            literal $1028;
            literal $128;
          }
        }
      }
      assign {
        field_get {
          id $jodin_heap;
          id $bytes_free;
        }
        assign_type::@=;
        literal $0;
      }
      return {
        true;
      }
    }
  }
  function_definition [void] {
    empty;
    id $__free_heap;
    params;
    compound_statement {
      func_call {
        id $free;
        sequence {
          field_get {
            id $jodin_heap;
            id $jheap;
          }
        }
      }
    }
  }
  function_definition [void*] {
    empty;
    id $__jalloc;
    params {
      dec [size_t] {
        id $length;
      }
    }
    compound_statement {
      return {
        func_call {
          id $malloc;
          sequence {
            id $length;
          }
        }
      }
    }
  }
  generic {
    parameterized_types {
      parameter_type {
        id $T;
      }
    }
    function_definition [size_t] {
      empty;
      id $getActualSize;
      params;
      compound_statement {
        return {
          sizeof [T];
        }
      }
    }
  }
  declarations {
    function_description [void] {
      id $__init_reflection;
      params;
    }
  }
  declarations {
    function_description [void] {
      id $__init_heap;
      params;
    }
  }
  declarations {
    function_description [void] {
      id $__free_heap;
      params;
    }
  }
  declarations {
    function_description [int] {
      id $__main;
      params {
        dec [int] {
          id $argc;
        }
        dec [std::String[]] {
          id $argv;
          empty;
        }
      }
    }
  }
  top_level_decs {
    declarations {
      initialized_declaration {
        dec [std::ClassInfo] {
          id $class_std_ClassInfo612126077_info;
        }
        literal $0;
      }
    }
    declarations {
      initialized_declaration {
        dec [std::ClassInfo] {
          id $class_std_Object250602564_info;
        }
        literal $0;
      }
    }
    declarations {
      initialized_declaration {
        dec [std::ClassInfo] {
          id $class_std_String119220082_info;
        }
        literal $0;
      }
    }
    declarations {
      initialized_declaration {
        dec [std::ClassInfo] {
          id $class_ll_Node1687898818_info;
        }
        literal $0;
      }
    }
    declarations {
      initialized_declaration {
        dec [std::ClassInfo] {
          id $class_ll_IntLinkedList190643162_info;
        }
        literal $0;
      }
    }
    function_definition [std::ClassInfo] {
      empty;
      id $__get_class;
      params {
        dec [class_id] {
          id $id;
        }
      }
      compound_statement {
        if {
          binop {
            op::@==;
            id $id;
            literal $1;
          }
          return {
            id $class_std_ClassInfo612126077_info;
          }
          empty;
        }
        if {
          binop {
            op::@==;
            id $id;
            literal $0;
          }
          return {
            id $class_std_Object250602564_info;
          }
          empty;
        }
        if {
          binop {
            op::@==;
            id $id;
            literal $2;
          }
          return {
            id $class_std_String119220082_info;
          }
          empty;
        }
        if {
          binop {
            op::@==;
            id $id;
            literal $6;
          }
          return {
            id $class_ll_Node1687898818_info;
          }
          empty;
        }
        if {
          binop {
            op::@==;
            id $id;
            literal $7;
          }
          return {
            id $class_ll_IntLinkedList190643162_info;
          }
          empty;
        }
        return {
          id $nullptr;
        }
      }
    }
  }
  function_definition [int] {
    empty;
    id $main;
    params {
      dec [int] {
        id $argc;
      }
      dec [char*[]] {
        id $argv;
        empty;
      }
    }
    compound_statement {
      func_call {
        id $__init_heap;
        sequence;
      }
      func_call {
        id $__init_reflection;
        sequence;
      }
      declarations {
        dec [std::String[id $argc;] {
          id $args;
          id $argc;
        }
      }
      for {
        declarations {
          initialized_declaration {
            dec [int] {
              id $i;
            }
            literal $0;
          }
        }
        binop {
          op::@<;
          id $i;
          id $argc;
        }
        postop {
          id $i;
          op::@++;
        }
        assign {
          arr_get {
            id $args;
            id $i;
          }
          assign_type::@=;
          constructor_call::@new [std::String] {
            sequence {
              arr_get {
                id $argv;
                id $i;
              }
            }
          }
        }
      }
      declarations {
        initialized_declaration {
          dec [int] {
            id $output;
          }
          func_call {
            id $__main;
            sequence {
              id $argc;
              id $args;
            }
          }
        }
      }
      for {
        declarations {
          initialized_declaration {
            dec [int] {
              id $i;
            }
            literal $0;
          }
        }
        binop {
          op::@<;
          id $i;
          id $argc;
        }
        postop {
          id $i;
          op::@++;
        }
        method_call {
          indirection {
            arr_get {
              id $args;
              id $i;
            }
          }
          id $drop;
          sequence;
        }
      }
      func_call {
        id $__free_heap;
        sequence;
      }
      return {
        id $output;
      }
    }
  }
  function_definition [void] {
    empty;
    id $__init_reflection;
    params;
    compound_statement {
      assign {
        id $class_std_ClassInfo612126077_info;
        assign_type::@=;
        constructor_call::@new [std::ClassInfo] {
          sequence;
        }
      }
      assign {
        field_get {
          indirection {
            id $class_std_ClassInfo612126077_info;
          }
          id $name;
        }
        assign_type::@=;
        constructor_call::@new [std::String] {
          sequence {
            string $"std::ClassInfo";
          }
        }
      }
      assign {
        field_get {
          indirection {
            id $class_std_ClassInfo612126077_info;
          }
          id $classHash;
        }
        assign_type::@=;
        uniop {
          op::@-;
          literal $1796039203;
        }
      }
      assign {
        field_get {
          indirection {
            id $class_std_ClassInfo612126077_info;
          }
          id $info;
        }
        assign_type::@=;
        id $class_std_ClassInfo612126077_info;
      }
      assign {
        id $class_std_Object250602564_info;
        assign_type::@=;
        constructor_call::@new [std::ClassInfo] {
          sequence;
        }
      }
      assign {
        field_get {
          indirection {
            id $class_std_Object250602564_info;
          }
          id $name;
        }
        assign_type::@=;
        constructor_call::@new [std::String] {
          sequence {
            string $"std::Object";
          }
        }
      }
      assign {
        field_get {
          indirection {
            id $class_std_Object250602564_info;
          }
          id $classHash;
        }
        assign_type::@=;
        literal $821255108;
      }
      assign {
        id $class_std_String119220082_info;
        assign_type::@=;
        constructor_call::@new [std::ClassInfo] {
          sequence;
        }
      }
      assign {
        field_get {
          indirection {
            id $class_std_String119220082_info;
          }
          id $name;
        }
        assign_type::@=;
        constructor_call::@new [std::String] {
          sequence {
            string $"std::String";
          }
        }
      }
      assign {
        field_get {
          indirection {
            id $class_std_String119220082_info;
          }
          id $classHash;
        }
        assign_type::@=;
        literal $599144754;
      }
      assign {
        id $class_ll_Node1687898818_info;
        assign_type::@=;
        constructor_call::@new [std::ClassInfo] {
          sequence;
        }
      }
      assign {
        field_get {
          indirection {
            id $class_ll_Node1687898818_info;
          }
          id $name;
        }
        assign_type::@=;
        constructor_call::@new [std::String] {
          sequence {
            string $"ll::Node";
          }
        }
      }
      assign {
        field_get {
          indirection {
            id $class_ll_Node1687898818_info;
          }
          id $classHash;
        }
        assign_type::@=;
        literal $785255806;
      }
      assign {
        id $class_ll_IntLinkedList190643162_info;
        assign_type::@=;
        constructor_call::@new [std::ClassInfo] {
          sequence;
        }
      }
      assign {
        field_get {
          indirection {
            id $class_ll_IntLinkedList190643162_info;
          }
          id $name;
        }
        assign_type::@=;
        constructor_call::@new [std::String] {
          sequence {
            string $"ll::IntLinkedList";
          }
        }
      }
      assign {
        field_get {
          indirection {
            id $class_ll_IntLinkedList190643162_info;
          }
          id $classHash;
        }
        assign_type::@=;
        uniop {
          op::@-;
          literal $1614970726;
        }
      }
      assign {
        field_get {
          indirection {
            id $class_std_ClassInfo612126077_info;
          }
          id $parent;
        }
        assign_type::@=;
        func_call {
          id $__get_class;
          sequence {
            literal $0;
          }
        }
      }
      assign {
        field_get {
          indirection {
            id $class_std_Object250602564_info;
          }
          id $parent;
        }
        assign_type::@=;
        id $nullptr;
      }
      assign {
        field_get {
          indirection {
            id $class_std_String119220082_info;
          }
          id $parent;
        }
        assign_type::@=;
        func_call {
          id $__get_class;
          sequence {
            literal $0;
          }
        }
      }
      assign {
        field_get {
          indirection {
            id $class_ll_Node1687898818_info;
          }
          id $parent;
        }
        assign_type::@=;
        func_call {
          id $__get_class;
          sequence {
            literal $0;
          }
        }
      }
      assign {
        field_get {
          indirection {
            id $class_ll_IntLinkedList190643162_info;
          }
          id $parent;
        }
        assign_type::@=;
        func_call {
          id $__get_class;
          sequence {
            literal $0;
          }
        }
      }
    }
  }
}
}
