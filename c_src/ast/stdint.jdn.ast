ast {
top_level_decs {
  typedef [unsigned long int] {
    id $class_id;
  }
  top_level_decs {
    declarations {
      function_description [std::ClassInfo*] {
        id $__get_class;
        params {
          dec [class_id] {
            id $id;
          }
        }
      }
    }
  }
  typedef [char] {
    id $i8;
  }
  typedef [unsigned char] {
    id $u8;
  }
  typedef [int] {
    id $i16;
  }
  typedef [unsigned int] {
    id $u16;
  }
  typedef [int] {
    id $i32;
  }
  typedef [unsigned int] {
    id $u32;
  }
  typedef [long long int] {
    id $i64;
  }
  typedef [unsigned long long int] {
    id $u64;
  }
  typedef [u32] {
    id $size_t;
  }
  typedef [u8] {
    id $bool;
  }
  qualifiers_and_specifiers [std::String*] {
    class;
    type $String;
  }
  qualifiers_and_specifiers [std::ClassInfo*] {
    class;
    type $ClassInfo;
  }
  qualifiers_and_specifiers [std::Int*] {
    class;
    type $Int;
  }
  declarations {
    function_description [void*] {
      id $calloc;
      params {
        dec [size_t] {
          id $size;
        }
        dec [size_t] {
          id $length;
        }
      }
    }
  }
  declarations {
    function_description [void] {
      id $free;
      params {
        dec [void*] {
          id $ptr;
        }
      }
    }
  }
  declarations {
    function_description [void] {
      id $exit;
      params {
        dec [int] {
          id $status;
        }
      }
    }
  }
  declarations {
    function_description [void] {
      id $panic;
      params {
        dec [std::String*] {
          id $msg;
        }
      }
    }
  }
  declarations {
    function_description [void] {
      id $print;
      params {
        dec [const char*] {
          id $c;
        }
      }
    }
  }
  declarations {
    function_description [void] {
      id $println;
      params {
        dec [const char*] {
          id $c;
        }
      }
    }
  }
  declarations {
    function_description [void] {
      id $print_s;
      params {
        dec [std::String*] {
          id $o;
        }
      }
    }
  }
  declarations {
    function_description [void] {
      id $println_s;
      params {
        dec [std::String*] {
          id $o;
        }
      }
    }
  }
  declarations {
    initialized_declaration {
      dec [void*] {
        id $nullptr;
      }
      cast [void*] {
        literal $0;
      }
    }
  }
  top_level_decs {
    class_definition [std::Object] {
      id $Object;
      class_level_declarations {
        class_level_declaration {
          visibility::@private;
          declarations {
            dec [std::ClassInfo*] {
              id $info;
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          declarations {
            dec [long int] {
              id $references;
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          constructor_definition [std::Object*] {
            type $Object;
            params;
            empty;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [int] {
            virtual;
            id $hashcode;
            params;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [bool] {
            virtual;
            id $equals;
            params {
              dec [std::Object*] {
                id $other;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [void] {
            virtual;
            id $drop;
            params;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [std::String*] {
            virtual;
            id $toString;
            params;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [std::ClassInfo*] {
            id $getClass;
            params;
          }
        }
      }
      compilation_tag_list {
        compilation_tag {
          id $setAsDefaultInheritance;
          empty;
        }
      }
    }
    class_definition [std::ClassInfo] {
      id $ClassInfo;
      class_level_declarations {
        class_level_declaration {
          visibility::@private;
          declarations {
            dec [std::String*] {
              id $name;
            }
          }
        }
        class_level_declaration {
          visibility::@private;
          declarations {
            dec [std::ClassInfo*] {
              id $parent;
            }
          }
        }
        class_level_declaration {
          visibility::@private;
          declarations {
            dec [i32] {
              id $classHash;
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          constructor_definition [std::ClassInfo*] {
            type $ClassInfo;
            params;
            empty;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [std::String*] {
            id $getName;
            params;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [bool] {
            id $is_object;
            params {
              dec [std::Object] {
                id $o;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@private;
          function_description [bool] {
            id $is_class;
            params {
              dec [std::ClassInfo*] {
                id $o;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [bool] {
            virtual;
            id $equals;
            params {
              dec [std::Object] {
                id $other;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [bool] {
            virtual;
            id $equals;
            params {
              dec [std::ClassInfo*] {
                id $other;
              }
            }
          }
        }
      }
    }
    class_definition [std::String] {
      id $String;
      class_level_declarations {
        class_level_declaration {
          visibility::@internal;
          declarations {
            dec [char*] {
              id $backingPtr;
            }
          }
        }
        class_level_declaration {
          visibility::@internal;
          declarations {
            dec [int] {
              id $length;
            }
          }
        }
        class_level_declaration {
          visibility::@internal;
          declarations {
            dec [int] {
              id $cLength;
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          constructor_definition [std::String*] {
            type $String;
            params {
              dec [const char*] {
                id $bp;
              }
            }
            empty;
          }
        }
        class_level_declaration {
          visibility::@public;
          constructor_definition [std::String*] {
            type $String;
            params {
              dec [char] {
                id $c;
              }
            }
            empty;
          }
        }
        class_level_declaration {
          visibility::@public;
          constructor_definition [std::String*] {
            type $String;
            params;
            empty;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [void] {
            virtual;
            id $drop;
            params;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [std::String*] {
            id $concat;
            params {
              dec [std::String*] {
                id $other;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [std::String*] {
            id $concat;
            params {
              dec [char*] {
                id $other;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [std::String*] {
            id $concat_integer;
            params {
              dec [long int] {
                id $other;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [std::String*] {
            id $concat;
            params {
              dec [std::Object] {
                id $other;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [std::String*] {
            id $concat;
            params {
              dec [char] {
                id $c;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [char*] {
            id $getCStr;
            params;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [int] {
            virtual;
            id $length;
            params;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [std::String*] {
            virtual;
            id $toString;
            params;
          }
        }
      }
    }
  }
  top_level_decs {
    class_definition [std::Int] {
      id $Int;
      class_level_declarations {
        class_level_declaration {
          visibility::@private;
          declarations {
            dec [int] {
              id $value;
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          constructor_definition [std::Int*] {
            type $Int;
            params {
              dec [int] {
                id $value;
              }
            }
            empty;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [int] {
            id $getValue;
            params;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [void] {
            id $setValue;
            params {
              dec [int] {
                id $value;
              }
            }
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [std::String] {
            virtual;
            id $toString;
            params;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [std::Int*] {
            id $abs;
            params;
          }
        }
        class_level_declaration {
          visibility::@public;
          function_description [std::Int*] {
            id $pow;
            params {
              dec [int] {
                id $exp;
              }
            }
          }
        }
      }
    }
  }
  top_level_decs {
    implement [std::Int] {
      constructor_definition [std::Int] {
        type $Int;
        params {
          dec [int] {
            id $value;
          }
        }
        compound_statement {
          assign {
            field_get {
              indirection {
                id $this;
              }
              id $value;
            }
            assign_type::@=;
            id $value;
          }
        }
      }
      function_definition [int] {
        implementing [std::Int] {
          type $Int;
        }
        id $getValue;
        params;
        compound_statement {
          return {
            field_get {
              indirection {
                id $this;
              }
              id $value;
            }
          }
        }
      }
      function_definition [void] {
        implementing [std::Int] {
          type $Int;
        }
        id $setValue;
        params {
          dec [int] {
            id $value;
          }
        }
        compound_statement {
          assign {
            field_get {
              indirection {
                id $this;
              }
              id $value;
            }
            assign_type::@=;
            id $value;
          }
        }
      }
      function_definition [std::String] {
        implementing [std::Int] {
          type $Int;
        }
        id $toString;
        params;
        compound_statement {
          if {
            binop {
              op::@<;
              field_get {
                indirection {
                  id $this;
                }
                id $value;
              }
              literal $0;
            }
            return {
              method_call {
                indirection {
                  constructor_call::@new [std::String] {
                    sequence {
                      literal $'-';
                    }
                  }
                }
                id $concat;
                sequence {
                  method_call {
                    indirection {
                      method_call {
                        indirection {
                          id $this;
                        }
                        id $abs;
                        sequence;
                      }
                    }
                    id $toString;
                    sequence;
                  }
                }
              }
            }
            empty;
          }
          declarations {
            initialized_declaration {
              dec [int] {
                id $last;
              }
              binop {
                op::@%;
                field_get {
                  indirection {
                    id $this;
                  }
                  id $value;
                }
                literal $10;
              }
            }
          }
          declarations {
            initialized_declaration {
              dec [std::Int] {
                id $tail;
              }
              constructor_call::@new [std::Int] {
                sequence {
                  id $last;
                }
              }
            }
          }
          declarations {
            initialized_declaration {
              dec [int] {
                id $first;
              }
              binop {
                op::@/;
                field_get {
                  indirection {
                    id $this;
                  }
                  id $value;
                }
                literal $10;
              }
            }
          }
          if {
            binop {
              op::@>;
              id $first;
              literal $0;
            }
            compound_statement {
              declarations {
                initialized_declaration {
                  dec [std::Int] {
                    id $head;
                  }
                  constructor_call::@new [std::Int] {
                    sequence {
                      id $first;
                    }
                  }
                }
              }
              return {
                method_call {
                  indirection {
                    method_call {
                      indirection {
                        id $head;
                      }
                      id $toString;
                      sequence;
                    }
                  }
                  id $concat;
                  sequence {
                    id $tail;
                  }
                }
              }
            }
            compound_statement {
              return {
                method_call {
                  indirection {
                    constructor_call::@new [std::String] {
                      sequence;
                    }
                  }
                  id $concat;
                  sequence {
                    cast [char] {
                      binop {
                        op::@+;
                        literal $'0';
                        method_call {
                          indirection {
                            id $tail;
                          }
                          id $getValue;
                          sequence;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      function_definition [std::Int] {
        implementing [std::Int] {
          type $Int;
        }
        id $abs;
        params;
        compound_statement {
          if {
            binop {
              op::@>=;
              field_get {
                indirection {
                  id $this;
                }
                id $value;
              }
              literal $0;
            }
            return {
              id $this;
            }
            empty;
          }
          return {
            constructor_call::@new [std::Int] {
              sequence {
                binop {
                  op::@*;
                  field_get {
                    indirection {
                      id $this;
                    }
                    id $value;
                  }
                  uniop {
                    op::@-;
                    literal $1;
                  }
                }
              }
            }
          }
        }
      }
      function_definition [std::Int] {
        implementing [std::Int] {
          type $Int;
        }
        id $pow;
        params {
          dec [int] {
            id $exp;
          }
        }
        compound_statement {
          if {
            binop {
              op::@<;
              id $exp;
              literal $0;
            }
            return {
              constructor_call::@new [std::Int] {
                sequence {
                  literal $0;
                }
              }
            }
            empty;
          }
          if {
            binop {
              op::@==;
              id $exp;
              literal $0;
            }
            return {
              constructor_call::@new [std::Int] {
                sequence {
                  literal $1;
                }
              }
            }
            empty;
          }
          return {
            constructor_call::@new [std::Int] {
              sequence {
                binop {
                  op::@*;
                  field_get {
                    indirection {
                      id $this;
                    }
                    id $value;
                  }
                  field_get {
                    indirection {
                      method_call {
                        indirection {
                          id $this;
                        }
                        id $pow;
                        sequence {
                          binop {
                            op::@-;
                            id $exp;
                            literal $1;
                          }
                        }
                      }
                    }
                    id $value;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
}
