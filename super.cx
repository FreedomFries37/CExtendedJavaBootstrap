int (*func_pointer)(void*);
int hello(void* beep) {
	return 0;
}

typedef unsigned long size_t;
void* malloc(size_t size);
int strlen(const char* src);
char* strcat(char* dest, const char* src);
char* strcpy(char* dest, const char* src);
char* printf(const char* format, ...);


struct string_vtable;



struct string_vtable {
	unsigned int long offset;
	int (*get_num_characters)(void* this);
};
struct string {
	struct string_vtable vtable;
	char* ptr;
	int length;
	struct string* (*concat)(void* this, struct string* other);
};
typedef struct string string;


int string_get_num_characters_voidp(void* __this);
int string2_get_num_characters_voidp(void* __this);
struct string* string_concat_structstringp(void* __this, struct string* other);
string* string_constructor_empty(void* __this);
string* string_constructor_ccharp(void* __this, const char* cstr);

string* new_class_string() {
	string *output = malloc(sizeof(string));
	struct string_vtable vtable;


	vtable.offset = 0;
	vtable.get_num_characters = string_get_num_characters_voidp;


	output->vtable = vtable;
	output->concat = string_concat_structstringp;

	return output;
}

string* string_constructor_empty(void* __this) {
	string* this;
	this = (string*) __this;
	string_constructor_ccharp(this, "");
	return this;
}

string* string_constructor_ccharp(void* __this, const char* cstr) {
	string* this;
	this = (string*) __this;

	size_t len = strlen(cstr);
	this->length = len;
	this->ptr = malloc(sizeof(char) * (len + 1));
	this->ptr[len - 1] = '\0';
	strcpy(this->ptr, cstr);


	return this;
}

int string_get_num_characters_voidp(void* __this) {
	string* this;
	this = (string*) __this;
	return this->length;
}



struct string* string_concat_structstringp(void* __this, struct string* other) {
	string* this;
	this = (string*) __this;
	char str[this->length + other->length + 1];
	strcpy(str, this->ptr);
	strcat(str, other->ptr);
	//return new string(str);
	return string_constructor_ccharp(new_class_string(), str);
}


struct string2_vtable {
	unsigned int long offset;
	int (*get_num_characters)(void* this);
};
struct string2 {
	struct string2_vtable vtable;
	char* ptr;
	int length;
	struct string* (*concat)(void* this, struct string* other);
	int (*super_get_num_characters_voidp)(void* this);
};


typedef struct string2 string2;
int string2_super_get_num_characters_voidp(void* __this);

string2* new_class_string2() {
	string2 *output = malloc(sizeof(string2));
	struct string2_vtable vtable;
	int vtable_init = 0;
	vtable.offset = 0;
	vtable.get_num_characters = string2_get_num_characters_voidp;


	output->vtable = vtable;
	output->concat = string_concat_structstringp;
	output->super_get_num_characters_voidp = string2_super_get_num_characters_voidp;

	return output;
}

int string2_get_num_characters_voidp(void* __this) {
	string2* this;
	this = (string2*) __this;
	return this->length*2;
}

string2* string2_constructor_structstring(void* __this, string str) {
	string2* this;
	this = (string2*) __this;
	string_constructor_ccharp(this, str.ptr);

	return this;
}


int string2_super_get_num_characters_voidp(void* __this) {
	string2* this;
	this = (string2*) __this;
	int (*old)(void*);
	old = this->vtable.get_num_characters;
	this->vtable.get_num_characters = string_get_num_characters_voidp;
	int output;
	output = this->vtable.get_num_characters(this);
	this->vtable.get_num_characters = old;
	return output;
}

int main() {
	//string* s = new string("hello world");
	string* s = string_constructor_ccharp(new_class_string(), "hello world");
	//string* d = new string("yeet");
	string* d= string_constructor_ccharp(new_class_string(), "yeet ");
	d = d->concat(d, s);

	printf("%s\n", d->ptr);

	string2* string_2 = string2_constructor_structstring(new_class_string2(), *d);


	printf("%d\n", string_2->vtable.get_num_characters(string_2));
	printf("%d\n", string_2->super_get_num_characters_voidp(string_2));
	printf("%d\n", string_2->vtable.get_num_characters(string_2));


	return 0;
}
